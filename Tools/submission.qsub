#!/bin/bash

# Example qsub script for DragonsTooth

# NOTE: You will need to edit the Walltime, Resource Request, Queue, and Module lines
# to suit the requirements of your job. You will also, of course have to replace the example job
# commands below with those that run your job.

#### Resource Request: ####
#PBS -l nodes=2:ppn=24

#### Walltime ####
# Set the walltime, which is the maximum time your job can run in HH:MM:SS
# Note that if your job exceeds the walltime estimated during submission, the scheduler
# will kill it. So it is important to be conservative (i.e., to err on the high side)
# with the walltime that you include in your submission script.
#PBS -l walltime=100:00:00

#### Queue ####
# Queue name. NewRiver has four queues:
#   normal_q   for production jobs on all Haswell nodes
#   dev_q      for development/debugging jobs. These jobs must be short but can be large.
#   open_q     for jobs that don't need an allocation
#PBS -q normal_q

#### Account ####
# This determines which allocation this job's CPU hours are billed to.
# Replace "youraccount" below with the name of your allocation account.
# If you are a student, you will need to get this from your advisor.
# For more on allocations, go here: http://www.arc.vt.edu/allocations
#PBS -A LINbase_2017

# Access group. Do not change this line.
PBS -W group_list=dragonstooth

# Uncomment and add your email address to get an email when your job starts, completes, or aborts
#PBS -M longtian@vt.edu
#PBS -m bea

# Add any modules you might require. This example removes all modules and then adds
# the Intel compiler and MKL scientific libraries. Use the module avail command
# to see a list of available modules.
#module purge
#module load intel python/3.5.0

# Change to the directory from which the job was submitted
cd /home/longtian/dragonstooth/Data/

# Below here enter the commands to start your job. A few examples are provided below.
# Some useful variables set by the job:
#  $PBS_O_WORKDIR    Directory from which the job was submitted
#  $PBS_NODEFILE     File containing list of cores available to the job
#  $PBS_JOBID        Job ID (e.g., 111111.dt-scheduler.dt)
#  $PBS_NP           Number of cores allocated to the job
# Some useful storage locations (see ARC's Storage documentation for details):
#  $HOME     Home directory. Use for permanent files.
#  $WORK     Work directory. Use for fast I/O.
#  $TMPFS    File system set up in memory for this job. Use for very fast, small I/O
#  $TMPDIR   Local disk (hard drive) space set up for this job

# Say "Hello world!"
# echo "Hello world!"

# Run the program a.out
# ./a.out

# Run the OpenMP program ompProg with 24 threads (there are 24 cores per NewRiver Haswell node)
export OMP_NUM_THREADS=24
# ./ompProg

# Run the MPI program mpiProg. The -np flag tells MPI how many processes to use. $PBS_NP
# is an environment variable that holds the number of processes you requested. So if you
# selected nodes=2:ppn=24 above, $PBS_NP will hold 48.
# mpirun -np $PBS_NP ./mpiProg

# RUN the program
/home/longtian/dragonstooth/python/bin/average_nucleotide_identity.py -i Genomes_LINbase -o $HOME/dragonstooth/output/LINbase_pyani_out -m ANIblastall --blastall_exe /home/longtian/dragonstooth/blast/blastall --formatdb_exe /home/longtian/dragonstooth/blast/formatdb

exit;